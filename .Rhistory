miningtweets_text = read.csv(paste(pathOutput,'dataCleaned.csv',sep = ''))
# classify emotion
class_emo = classify_emotion(miningtweets_text, algorithm="bayes", prior=1.0, verbose = TRUE)
# get emotion best fit
emotion = class_emo[,7]
# substitute NA's by "unknown"
emotion[is.na(emotion)] = "unknown"
# classify polarity
class_pol = classify_polarity(miningtweets_text, algorithm="bayes")
library(twitteR)
library(RCurl)
library(wordcloud)
library(tm)
library(SnowballC)
library(Rstem)
library(NLP)
library(SentimentAnalysis)
library(plyr)
library(ggplot2)
library(RColorBrewer)
library(sentiment)
miningtweets_text = sapply(miningtweets_text, try.error)
# remove NAs in miningtweets_text
miningtweets_text = miningtweets_text[!is.na(miningtweets_text)]
names(miningtweets_text) = NULL
write.csv(miningtweets_text, paste(pathOutput,'dataCleaned.csv',sep = ''))
miningtweets_text = read.csv(paste(pathOutput,'dataCleaned.csv',sep = ''))
# classify emotion
class_emo = classify_emotion(miningtweets_text, algorithm="bayes", prior=1.0, verbose = TRUE)
# get emotion best fit
emotion = class_emo[,7]
# substitute NA's by "unknown"
emotion[is.na(emotion)] = "unknown"
# classify polarity
class_pol = classify_polarity(miningtweets_text, algorithm="bayes")
# get polarity best fit
polarity = class_pol[,4]
View(polarity)
miningtweets_text = read.csv(paste(pathOutput,'dataCleaned.csv',sep = ''))
# classify emotion
class_emo = classify_emotion(miningtweets_text, algorithm="bayes", prior=1.0, verbose = TRUE)
# get emotion best fit
emotion = class_emo[,7]
# substitute NA's by "unknown"
emotion[is.na(emotion)] = "unknown"
# classify polarity
class_pol = classify_polarity(miningtweets_text, algorithm="bayes")
# get polarity best fit
polarity = class_pol[,4]
View(polarity)
miningtweets_text = read.csv(paste(pathOutput,'dataCleaned.csv',sep = ''))
pathOutput = "D:\\KULIAH\\Data Science\\Praktikum\\Project\\"
write.csv(miningtweets_text, paste(pathOutput,'dataCleaned.csv',sep = ''))
miningtweets_text = read.csv(paste(pathOutput,'dataCleaned.csv',sep = ''))
# classify emotion
class_emo = classify_emotion(miningtweets_text, algorithm="bayes", prior=1.0, verbose = TRUE)
# get emotion best fit
emotion = class_emo[,7]
# substitute NA's by "unknown"
emotion[is.na(emotion)] = "unknown"
# classify polarity
class_pol = classify_polarity(miningtweets_text, algorithm="bayes")
# get polarity best fit
polarity = class_pol[,4]
View(polarity)
View(class_emo)
View(class_pol)
View(class_pol)
sent_df = data.frame(text=miningtweets_text, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
# sort data frame
sent_df = within(sent_df,
emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
View(sent_df)
View(sent_df)
miningtweets_text = read.csv(paste(pathOutput,'dataCleaned.csv',sep = ''))
# classify emotion
class_emo = classify_emotion(miningtweets_text, algorithm="bayes", prior=1.0, verbose = TRUE)
# get emotion best fit
emotion = class_emo[,7]
# substitute NA's by "unknown"
emotion[is.na(emotion)] = "unknown"
# classify polarity
class_pol = classify_polarity(miningtweets_text, algorithm="bayes")
# get polarity best fit
polarity = class_pol[,4]
View(polarity)
